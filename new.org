* Emacs configuration
  I follow a couple conventions for naming similar to those in spacemacs:

  Function names follow these conventions:

  + spacemacs/xxx is an interactive function called xxx
  + spacemacs//xxx is a private function called xxx (implementation details)
  + spacemacs|xxx is a macro called xxx
  + Variables follow these conventions:
  + spacemacs-xxx is a variable
  + spacemacs--xxx is a private variable (implementation details)
* Base emacs setup
** Set up emacs server
   #+BEGIN_SRC emacs-lisp
    (when (require 'server nil t)
      (unless (server-running-p)
	(server-start)))
   #+END_SRC

** Initialize some of utility functions
   #+BEGIN_SRC emacs-lisp
     (defun sw/add-to-load-path (dir)
       "Adds `dir` to load-path"
       (add-to-list 'load-path dir))
   #+END_SRC

   #+BEGIN_SRC emacs-lisp
 (defun sw/join-dirs (prefix suffix)
   "Joins `prefix` and `suffix` into a directory"
   (file-name-as-directory (concat prefix suffix)))
   #+END_SRC

   #+BEGIN_SRC emacs-lisp
 (defun sw/sudo-edit (&optional arg)
   "Edit this file as sudo"
   (interactive "P")
   (if (or arg (not buffer-file-name))
       (find-file (concat "/sudo::" (read-file-name "File: ")))
     (find-alternate-file (concat "/sudo::" buffer-file-name))))
   #+END_SRC

   #+BEGIN_SRC emacs-lisp
 (defun sw/chomp (str)
   "Chomp leading and tailing whitespace from STR."
   (while (string-match "\\`\n+\\|^\\s-+\\|\\s-+$\\|\n+\\'" str)
     (setq str (replace-match "" t t str))) str)
   #+END_SRC

   #+BEGIN_SRC emacs-lisp
     ;; (source: http://emacs.stackexchange.com/a/22174/93)
     (defun package-update (package &optional version)
       "Update a package from the package archives.
     If VERSION is nil, update the package to the most recent version
     available.  Otherwise, VERSION should be a version string, or a
     list of the type returned by `version-to-list'. The package will
     be updated only if the currently installed version is less than
     the version specified, even if a newer version is available."
       (unless package--initialized
	 (package-initialize t))
       (unless package-archive-contents
	 (package-refresh-contents))
       (let* ((current (cadr (assoc package package-alist)))
	      (current-version (if current (package-desc-version current) '(-1)))
	      (pkg-desc (cadr (assoc package package-archive-contents)))
	      (pkg-version (and pkg-desc (package-desc-version pkg-desc)))
	      (target-version (or (and (stringp version) (version-to-list version))
				  version
				  pkg-version)))
	 (when (version-list-< current-version target-version)
	   (if (null pkg-desc)
	       (error "Package `%s' not found in package archives" package))
	   (if (version-list-< pkg-version target-version)
	       (error "A suitable version of `%s' is not available" package))
	   (package-install pkg-desc)
	   (if current
	       (package-delete current)))
	 nil))
   #+END_SRC
   #+BEGIN_SRC emacs-lisp
  (defun sw/if-bound-eval (bound-item func)
    "If the given lexical is bound eval the expression"
    (if (boundp 'bound-item) (eval func)))

   #+END_SRC
** Initialize various directory paths.
*** Name this config
    #+BEGIN_SRC emacs-lisp
      (defconst sw-config-file "~/.emacs.d/new.org"
	"The path to my configuration file.")
    #+END_SRC
*** Create a directory for temporary stuff
    #+BEGIN_SRC emacs-lisp
     (defconst sw-tmp-local-dir
       "~/.emacs.d/.tmp"
       "My dir for storing random stuff")
     (defconst sw-dotfiles-dir "~/.emacs.d" "Emacs dotfile dir.")



     (make-directory (setq sw-tmp-local-dir (concat sw-dotfiles-dir ".tmp/")) t)

     ;; Command history will be saved to this.
     (setq savehist-file (concat (file-name-as-directory sw-tmp-local-dir) "history"))

     (setq custom-file (concat sw-dotfiles-dir "custom.el"))
    #+END_SRC

*** Add backup dir paths
    #+BEGIN_SRC emacs-lisp
     (defconst
       sw-backups-dir (sw/join-dirs sw-tmp-local-dir "backups")
       "Backup directory")
     (defconst
       sw-autosaves-dir (sw/join-dirs sw-tmp-local-dir "autosaves")
       "Autosaves directory")

     (make-directory sw-backups-dir t)
     (make-directory sw-autosaves-dir t)
    #+END_SRC

*** Set the org mode archive
    #+BEGIN_SRC emacs-lisp
(setq org-archive-location "~/.emacs.d/archive/archive.org")
    #+END_SRC
*** Save the history and custom file in temp too
    #+BEGIN_SRC emacs-lisp
(make-directory (setq sw-tmp-local-dir (concat sw-dotfiles-dir ".tmp/")) t)

;; Command history will be saved to this.
(setq savehist-file (concat (file-name-as-directory sw-tmp-local-dir) "history"))

(setq custom-file (concat sw-dotfiles-dir "custom.el"))
    #+END_SRC

*** Configure some other backup stuff while we're at it
    #+BEGIN_SRC emacs-lisp
     (setq
      backup-by-copying t  ; Don't clobber symlinks
      backup-directory-alist `((".*" . ,sw-backups-dir))
      auto-save-file-name-transforms `((".*" ,sw-autosaves-dir t))
      delete-old-versions t
      kept-new-versions 6
      kept-old-versions 2
      version-control t)   ; Use versioned backups
    #+END_SRC
** Do other default emacs customization
*** Set default browser
    #+BEGIN_SRC emacs-lisp
  ;; Use google-chrome for interwebs.
  (setq browse-url-browser-function 'browse-url-generic
	browse-url-generic-program "google-chrome")
    #+END_SRC
*** Fix some ansi-term stuff
    #+BEGIN_SRC emacs-lisp
;; Close the terminal buffer once it exits
;; http://echosa.github.io/blog/2012/06/06/improving-ansi-term/
(defadvice term-sentinel (around my-advice-term-sentinel (proc msg))
  (if (memq (process-status proc) '(signal exit))
      (let ((buffer (process-buffer proc)))
	ad-do-it
	(kill-buffer buffer))
    ad-do-it))
(ad-activate 'term-sentinel)
    #+END_SRC
    #+BEGIN_SRC emacs-lisp
  ;; Always use bash as default shell
  (defvar my-term-shell "/bin/bash")
  (defadvice ansi-term (before force-bash)
    (interactive (list my-term-shell)))
  (ad-activate 'ansi-term)
    #+END_SRC
    #+BEGIN_SRC emacs-lisp
  ;; Use utf-8 encoding
  (defun my-term-use-utf8 ()
    (set-buffer-process-coding-system 'utf-8-unix 'utf-8-unix))
  (add-hook 'term-exec-hook 'my-term-use-utf8)
    #+END_SRC
*** Other miscellaneous stuff
    #+BEGIN_SRC emacs-lisp
;; Don't clobber things in the system clipboard when killing emacs
  (setq save-interprogram-paste-before-kill t)

  ;; Save minibuffer history across sessions
  (savehist-mode 1)

  ;; Don't paste at mouse, use the cursor.
  (setq mouse-yank-at-point t)

  ;; It's never worth making me type out yes or no
  (defalias 'yes-or-no-p 'y-or-n-p)
    #+END_SRC
* Packages
** Set up package management
*** Set up repos

    #+BEGIN_SRC emacs-lisp
(require 'package)

; Turn off the annoying placement of package-initilize
(setq package--init-file-ensured t)

(setq package-enable-at-startup nil)
(add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
(add-to-list 'package-archives '("marmalade" . "http://marmalade-repo.org/packages/"))
(add-to-list 'package-archives '("gnu" . "http://elpa.gnu.org/packages/"))
(package-initialize)
    #+END_SRC

*** Use use-package to manage package startup and download
    #+BEGIN_SRC emacs-lisp
; Automatically install package-install
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(eval-when-compile
(progn
  (require 'diminish)
  (require 'use-package)))
    #+END_SRC
*** Add quelpa to install git libraries

    #+BEGIN_SRC emacs-lisp
(use-package quelpa :ensure)
    #+END_SRC

*** Add common lisp
    #+BEGIN_SRC emacs-lisp
(use-package cl :ensure)
(use-package let-alist :ensure)
    #+END_SRC

** Setup visual preferences
   #+BEGIN_SRC emacs-lisp
(if (not (bound-and-true-p visual-initialized))
    (progn
      (defconst visual-initialized t
	"The visual configuration has been initilized.")

      ;; Disable menu bar
      (menu-bar-mode -1)
      ;; Disable scroll-bar
      (scroll-bar-mode -1)
      ;; Disable tool bar
      (tool-bar-mode -1)
      ;; Better word wrapping
      (add-hook 'text-mode-hook 'visual-line-mode)
      ;; Show opposite parentheses
      (show-paren-mode 1)
      (setq show-paren-delay 0) ; Without delay
      )
)
   #+END_SRC
*** Use zenburn as the colorscheme
    #+BEGIN_SRC emacs-lisp
(use-package zenburn-theme
		 :ensure t
		 :init
		 (progn (load-theme 'zenburn t)))
    #+END_SRC

** Plugins

   Now, the moment we've all been waiting for, various plugin installs and configuration.

*** auto-complete

    #+BEGIN_SRC emacs-lisp
 (use-package auto-complete
   :ensure t
   :diminish auto-complete-mode
   :config
   (progn
     (ac-config-default)
     (setq ac-fuzzy-enable t)
     (setq ac-dwim t)
     (setq ac-comphist-file (concat sw-tmp-local-dir "ac-comphist.dat"))))
    #+END_SRC

*** counsel...
    #+BEGIN_SRC emacs-lisp
      (use-package counsel :ensure t)
    #+END_SRC
*** cscope
    #+BEGIN_SRC emacs-lisp
   (use-package xcscope :ensure t)
    #+END_SRC
*** evil-mode

**** Do some stuff before we initialize evil
     #+BEGIN_SRC emacs-lisp
(defun sw/evil-mode/pre-evil-mode-configure()
"Set up some configuration for evil mode before it is initialized."
  (setq
   ;; h/l wrap around to next lines
   evil-cross-lines t
   evil-want-C-u-scroll t))
(sw/evil-mode/pre-evil-mode-configure)
     #+END_SRC

**** Install the actual package
     #+BEGIN_SRC emacs-lisp
     (use-package evil
       :ensure t
       :diminish undo-tree-mode
       :init
       (progn
	 ;; if we don't have this evil overwrites the cursor color
	 ;; (setq evil-default-cursor t)

	 ;; TODO: Probably will remove this package in favor of learning how to
	 ;; do this on my own.
	 ;; This has to be before we invoke evil-mode due to:
	 ;; https://github.com/cofi/evil-leader/issues/10
	 (use-package evil-leader
	   :ensure t
	   :config
	   (progn
	     (evil-leader/set-leader ",")
	     (global-evil-leader-mode))))

       :config
       (progn
	 (use-package evil-tabs
	   :init
	   (quelpa '(evil-tabs :repo "spwilson2/evil-tabs" :fetcher github))
	   :config
	   (progn
	     (global-evil-tabs-mode t)))

	 ;; MUST BE AFTER evil-tabs else it breaks initial evil
	 ;; https://github.com/krisajenkins/evil-tabs/issues/12
	 (evil-mode 1)))
     #+END_SRC

**** Do some configuration

     #+BEGIN_SRC emacs-lisp
(defun sw/evil-mode/configure ()
  "Configure basic evil."

  ;; Default for term-mode should be emacs
  (evil-set-initial-state 'term-mode 'emacs)

  ;; esc should always quit: http://stackoverflow.com/a/10166400/61435
  (define-key evil-normal-state-map [escape] 'keyboard-quit)
  (define-key evil-visual-state-map [escape] 'keyboard-quit)
  (define-key minibuffer-local-map [escape] 'abort-recursive-edit)
  (define-key minibuffer-local-ns-map [escape] 'abort-recursive-edit)
  (define-key minibuffer-local-completion-map [escape] 'abort-recursive-edit)
  (define-key minibuffer-local-must-match-map [escape] 'abort-recursive-edit)
  (define-key minibuffer-local-isearch-map [escape] 'abort-recursive-edit))

(sw/evil-mode/configure)
     #+END_SRC

*** evil-leader
    #+BEGIN_SRC emacs-lisp
;;  (use-package evil-mode
;;    :ensure
;;    :config
;;    (global-evil-leader-mode))
    #+END_SRC
*** evil-org-mode
    #+BEGIN_SRC emacs-lisp
      (use-package evil-org
	:ensure t
	:after org
	:config
	;; Open links with gt
	(progn
	  (add-hook 'org-mode-hook 'evil-org-mode)
	  (add-hook 'evil-org-mode-hook
		    (lambda ()
		      (progn
			;; Remove the old bindings
			;; (evil-define-key 'normal evil-org-mode-map (kbd "<tab>") nil)
			;; (evil-define-key 'visual evil-org-mode-map (kbd "<tab>") nil)
			;; (evil-define-key 'normal org-mode-map (kbd "<tab>") nil)
			;; (evil-define-key 'visual org-mode-map (kbd "<tab>") nil)

			;; Use enter for opening for terminal emacs.
			(evil-define-key 'normal org-mode-map (kbd "RET") 'org-cycle)
			(evil-define-key 'visual org-mode-map (kbd "RET") 'org-cycle)
			;;(evil-define-key 'normal org-mode-map (kbd "g f") 'org-open-at-point)
			(evil-org-set-key-theme))))))
    #+END_SRC
*** eyebrowse
    A tab system
    #+BEGIN_SRC emacs-lisp
(use-package eyebrowse
  :ensure t
  :config
  (eyebrowse-mode t))
    #+END_SRC
*** flycheck
    A syntax checker.
    #+BEGIN_SRC emacs-lisp
(use-package flycheck
  :ensure t
  :config
  (progn
    (setq flycheck-highlighting-mode nil)
    (global-flycheck-mode)))
    #+END_SRC
*** ggtags
    Frontend to the global tag system.
     #+BEGIN_SRC emacs-lisp
    (use-package ggtags :ensure)
     #+END_SRC
**** TODO [[https://github.com/leoliu/ggtags][configure]]
*** helm-make
    #+BEGIN_SRC emacs-lisp
      (use-package helm-make :ensure)
    #+END_SRC
*** hydra
    A wacky key composition hotkey plugin.

    #+BEGIN_SRC emacs-lisp
      (use-package hydra :ensure)
    #+END_SRC
*** ivy
    A list narrowing fuzzy completion system.
    #+BEGIN_SRC emacs-lisp
     (use-package ivy :ensure t
       :diminish (ivy-mode . "")
       :config
       (ivy-mode 1)
       ;; Hide the .. and . directories
       (setq ivy-extra-directories nil)
       ;; add ‘recentf-mode’ and bookmarks to ‘ivy-switch-buffer’.
       (setq ivy-use-virtual-buffers t)
       ;; number of result lines to display
       (setq ivy-height 10)
       ;; does not count candidates
       (setq ivy-count-format "")
       ;; No regexp by default
       (setq ivy-initial-inputs-alist nil)
       ;; configure regexp engine.
       (setq ivy-re-builders-alist
	     ;; allow input not in order
	     '((t   . ivy--regex-ignore-order))))
    #+END_SRC
*** magit
    A git porcelain.

    #+BEGIN_SRC emacs-lisp
      (use-package magit
	:ensure t
	:config
	;; use ivy to autocomplete
	(setq magit-completing-read-function 'ivy-completing-read))
    #+END_SRC
**** evil-magit
     Adds keybindings to magit.
     #+BEGIN_SRC emacs-lisp
       ;; Adds keybindings for magit that fit evil.
       (use-package evil-magit :ensure)
     #+END_SRC
*** nlinum
    A faster line numbering system
    #+BEGIN_SRC emacs-lisp
      (use-package nlinum
	:ensure t
	:config
	(progn
	  ;; On window systems just use fringe as separator, terminal we use a bar.
	  (setq-local sw-linum-separator (if window-system "" "|"))

	  ;; Precaclulate the line number width.
	  (add-hook 'linum-before-numbering-hook
		    (lambda ()
		      (setq-local linum-format-fmt
				  (let ((w (length (number-to-string
						    (count-lines (point-min) (point-max))))))
				    (concat "%" (number-to-string w) "d" sw-linum-separator)))))

	  (defun linum-format-func (line)
	    (concat
	     (propertize (format linum-format-fmt line) 'face 'linum)
	     (propertize " " 'face 'mode-line)))

	  (setq linum-format 'linum-format-func )))
    #+END_SRC
*** persp-mode
    #+BEGIN_SRC emacs-lisp
      (use-package persp-mode
	:ensure t)
    #+END_SRC
*** projectile
    #+BEGIN_SRC emacs-lisp
      (use-package projectile
	:ensure
	:diminish projectile-mode
	:config
	(progn
	  (projectile-mode t)
	  ;; Use ivy for completion in projectile
	  (setq projectile-completion-system 'ivy)))
    #+END_SRC
*** smooth-scrolling
    #+BEGIN_SRC emacs-lisp
     (use-package smooth-scrolling
       :ensure t
       :config
       (progn
	 (smooth-scrolling-mode 1)
	 (setq-default smooth-scroll-margin 7)))
    #+END_SRC
    #+BEGIN_SRC emacs-lisp
    #+END_SRC

*** whitespace-mode
    #+BEGIN_SRC emacs-lisp
      (use-package whitespace
	:diminish whitespace-mode
	:config
	(progn
	  (setq sw-show-trailing-whitespace t)
	  (defun sw//show-trailing-whitespace ()
	    (when sw-show-trailing-whitespace
	      (set-face-attribute 'trailing-whitespace nil
				  :background
				  (face-attribute 'font-lock-comment-face
						  :foreground))
	      (setq show-trailing-whitespace 1)))
	  (add-hook 'prog-mode-hook 'sw//show-trailing-whitespace)

	  (defun sw//set-whitespace-style-for-diff ()
	    "Whitespace configuration for `diff-mode'"
	    (setq-local whitespace-style '(face
					   tabs
					   tab-mark
					   spaces
					   space-mark
					   trailing
					   indentation::space
					   indentation::tab
					   newline
					   newline-mark)))
	  (add-hook 'diff-mode-hook 'whitespace-mode)
	  (add-hook 'diff-mode-hook 'sw//set-whitespace-style-for-diff)))
    #+END_SRC
*** indent-guide
    Show indent levels.

    #+BEGIN_SRC emacs-lisp
(use-package indent-guide :ensure)
    #+END_SRC

*** tramp
    #+BEGIN_SRC emacs-lisp
     (setq tramp-persistency-file-name (sw/join-dirs sw-tmp-local-dir "tramp"))
     ;; Tramp shouldn't forget password in session
     (setq-default password-cache t)
     (setq-default password-cache-expiry nil)
    #+END_SRC
*** tramp-term
    #+BEGIN_SRC emacs-lisp
(use-package tramp-term :ensure)
    #+END_SRC
*** which-key
    #+BEGIN_SRC emacs-lisp
    (use-package which-key :ensure
    :diminish which-key-mode
    :config
    (which-key-mode))
    #+END_SRC
*** yasnippet
    An easy to use snippet macro system.

    #+BEGIN_SRC emacs-lisp
(use-package yasnippet
  :ensure t
  :diminish yas-minor-mode
  :config
  (progn
  ;(define-key yas-minor-mode-map (kbd "TAB") 'yas-expand)
  (yas-global-mode 1)))
    #+END_SRC
* Language Configurations
  I will now describe my language specific settings and mode configurations.
  Most of the stuff for configuring these can be autoloaded to save time at startup.

** Ada

    #+BEGIN_SRC emacs-lisp
;; We can't autoload this since we need it to provide ada-mode hooks
(use-package ada-mode
  :ensure t
  :init
  ;; Make sure we are using a version that is recent enough (has 2012 ada support)
  (package-update 'ada-mode '(5 2 1)))
    #+END_SRC

** C,C++

   #+BEGIN_SRC emacs-lisp
    (defun c-enter-continues-comments ()
      ;; FIXME need to create my own def for this to work.
      ;;(evil-local-set-key 'normal (kbd "o") 'c-context-line-break)
      (local-set-key (kbd "RET") 'c-context-line-break))

    ;; gem5 config,
    ;; TODO: Auto add hook not to mode but to buffer if path contains gem5
    (add-hook 'c-mode-common-hook (lambda ()
				    (indent-guide-mode t)
				    (sw/if-bound-eval 'indent-guide-mode '(indent-guide-mode t))
				    (add-hook 'before-save-hook 'delete-trailing-whitespace nil t)

				    ;; Use line splitting
				    (auto-fill-mode t)
				    (setq current-fill-column 79)
				    (setq whitespace-line-colum 79)
				    ;; Turn on trailing whitespace highlighting (It's default on right now.)
				    (setq whitespace-style '(face trailing lines))
				    (whitespace-mode t)

				    ;; Use line numbers
				    (nlinum-mode t)

				    ;;(spacemacs/toggle-highlight-long-lines-on)
				    ;;(spacemacs/toggle-fill-column-indicator-on)
				    (setq c-basic-offset 4)

				    ;; Spaces not tabs
				    (setq indent-tabs-mode nil)
				    (c-set-offset 'access-label -2)
				    (c-set-offset 'template-args-cont 4)
				    (c-set-offset 'arglist-intro 4)
				    (c-set-offset 'innamespace 0)
				    (c-enter-continues-comments)
				    (ws-butler-mode t)))
   #+END_SRC

** VimL
    #+BEGIN_SRC emacs-lisp
(use-package vimrc-mode
  :ensure t
  :config
  (add-to-list 'auto-mode-alist '("\\.vim\\(rc\\)?\\'" . vimrc-mode)))
    #+END_SRC

** Org

   Open a link with vim semantics in org mode.
   #+BEGIN_SRC emacs-lisp
    (defun sw-evil-org-open-link-or-file-at-point ()
      "Try to open the link or if unable to do that try to open it as a file."
      (interactive)
      ;;(condition-case nil (org-open-at-point) (user-error (find-file-at-point))))
      (condition-case nil (org-open-at-point) (user-error (find-file-at-point))))

    (evil-define-key 'normal org-mode-map (kbd "g f") 'sw-evil-org-open-link-or-file-at-point)

    ;; The org open command should be marked as a jump (added to the jump list), it doesn't
    ;; work great but it's better than nothing.
    (evil-add-command-properties #'org-open-at-point :jump t)

   #+END_SRC

* Keybindings
  Some keybindings that aren't language specific. Language specific keybings are in the [[Language Configurations]] section.

** TODO evil-mode
   #+BEGIN_SRC emacs-lisp
		     (defun sw/evil-mode/configure-bindings ()

		       ;;(define-key evil-ex-map "e " 'ido-find-file)
		       ;;(define-key evil-ex-map "b " 'ido-switch-buffer)

		       ;; Kill the current buffer without leaving the split
		       (evil-ex-define-cmd "kb[uffer]" 'kill-this-buffer)
		       ;; Open up a list of open buffers
		       (evil-ex-define-cmd "b[uffers]" 'buffer-menu)

		       ;; Open an ansi terminal in a new window
		       (evil-define-command sw/new-term (&optional direction)
			 "Splits the current window and opens a new ansi-term.
			 If no direction is given, will open a horizontal split."
			 :repeat nil
			 (interactive)
			 (let ((new-window (split-window (selected-window) nil
							 (if direction
							     direction
							     (if evil-split-window-below 'below 'above)))))
			   (when (and (not count) evil-auto-balance-windows)
			     (balance-windows (window-parent)))
			   (let ((buffer (term-ansi-make-term (generate-new-buffer-name "*ansi-term*")
					 my-term-shell)))
			     (set-window-buffer new-window buffer)
			     (select-window new-window)
			     (with-current-buffer buffer
			       (term-mode)
			       (term-char-mode)))))
		       (defun sw/evil-split-term () (interactive)
			      (sw/new-term))

		       (defun sw/evil-vsplit-term () (interactive)
			      (sw/new-term (if evil-vsplit-window-right 'right 'left)))


		       (evil-ex-define-cmd "ter[minal]" 'ansi-term)
		       (evil-ex-define-cmd "vt[erm]" 'sw/evil-vsplit-term)
		       (evil-ex-define-cmd "st[erm]" 'sw/evil-split-term)

		       (defun sw/tabeff () (interactive) (progn (evil-tabs-tabedit) (call-interactively 'find-file)))
		       (evil-ex-define-cmd "tabeff" 'sw/tabeff)

		       (define-key evil-normal-state-map ",ff" 'find-file)
		       (define-key evil-normal-state-map ",pff" 'projectile-find-file)
		       (define-key evil-normal-state-map ",fo" 'projectile-find-other-file)
		       (define-key evil-normal-state-map ",vc" 'projectile-vc)

		       (define-key evil-motion-state-map "]b" 'evil-next-buffer)
		       (define-key evil-motion-state-map "[b" 'evil-prev-buffer)
		       ;;(define-key evil-normal-state-map "[b" 'evil-next-buffer)
		       ;;(define-key evil-normal-state-map "]b" 'evil-prev-buffer)
     )

		     (sw/evil-mode/configure-bindings)
   #+END_SRC
*** TODO Add ivy locate binding
*** TODO Add ivy ag-or-grep binding

** term-mode
   #+BEGIN_SRC emacs-lisp
     (eval-after-load "term"
       (progn
       ;; Add pasting from emacs as default to the terminal
	 (define-key term-raw-map (kbd "C-S-V") 'term-paste)

	 ;; (key-chord-define-local "C-w C-w" '(lambda () (interactive) (other-window 1)))
	 ;; Add changing the window to the terminal
	 (define-key term-raw-map (kbd "C-w") nil)
	 (define-key term-raw-map (kbd "C-w C-w") '(lambda () (interactive) (other-window 1)))
	 (define-key term-raw-map (kbd "C-w n") '(lambda () (interactive) (evil-tabs-goto-tab nil)))
	 (define-key term-raw-map (kbd "C-w p") '(lambda () (interactive) (evil-tabs-goto-tab -1)))
	 (define-key term-raw-map (kbd "C-w c") 'evil-tabs-tabedit)
	 
	 (define-key term-raw-map (kbd "C-c gt") '(lambda () (interactive) (evil-tabs-goto-tab nil)))
	 (define-key term-raw-map (kbd "C-c gT") '(lambda () (interactive) (evil-tabs-goto-tab -1)))
	 (define-key term-raw-map (kbd "C-c ]b") 'evil-next-buffer)
	 (define-key term-raw-map (kbd "C-c [b") 'evil-prev-buffer)
	 (define-key term-raw-map (kbd "C-c C-t") 'evil-tabs-tabedit)
	 (define-key term-raw-map (kbd "C-c :") 'evil-ex)
	 (define-key term-raw-map (kbd "C-c f") 'find-file)
	 
	 ;;(evil-local-set-key 'normal term-mode "<escape>" 'evil-emacs-state)
	 
	 ;; TODO should map this to C-w raw output.
	 (define-key term-raw-map (kbd "C-c C-w") '(lambda () (interactive) (other-window 1)))))
   #+END_SRC
** Other user friendly functions
   #+BEGIN_SRC emacs-lisp
     (defun messages  ()
       "Open the messages buffer."
       (interactive)
       (switch-to-buffer "*Messages*"))

     (defun scratch ()
       "Open the scratch buffer."
       (interactive)
       (switch-to-buffer "*scratch*"))

     (defun edit-config ()
       "Open my config file for editing."
       (interactive)
       (find-file sw-config-file))

     (defun reload-config ()
       "Reload my config file."
       (interactive)
       (org-babel-load-file sw-config-file))
   #+END_SRC
* Reminders
  This is some reminder stuff incase I ever want to change or do these things...

** [[https://github.com/noctuid/evil-guide#keybindings-and-states][Add an evil keybinding]]
